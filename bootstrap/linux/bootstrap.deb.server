#!/bin/bash
#
# TO RUN: curl -s -L https://raw.githubusercontent.com/rickrussell/dotbeard/master/.bootstrap | bash
# Provision script for dev workstation
# Includes:
#   Bash-it: Bash theme and plugins
#   Tools: yadm, rbenv, ruby-build, vim, nodejs, aws-cli
#   Powerline: fonts, scripts, themes for vim/tmux https://github.com/powerline/fonts
#   Dircolors: https://github.com/seebi/dircolors-solarized
#   Virtualbox: manual deb install
#   Vagrant: Tool for building and managing virtual machine environments
#   Docker: Platform for containers; build, ship, and run distributed applications, whether on laptops, data center VMs, or the cloud
#
#  NOTE: This dev workstation assumes you have a current yadm repo
#        This script does not overwrite the current .bashrc if
#        bash_it theme is set.

set -e

WORK_DIR=$HOME/provision
YADM_REPO="git@github.com:rickrussell/dotbeard.git"
PACKAGES="apt-transport-https build-essential ca-certificates curl dnsutils git-core libsqlite3-dev libreadline6-dev net-tools nmap nmon software-properties-common python-dev python-pip software-properties-common sqlite tmux"
PROVISIONED="$HOME/.provisioned"
VIM_COLORSCHEME_URL="https://github.com/rickrussell/dotbeard/blob/master/.vim/colors/toxic.vim"
VIM_COLORSCHEME=${VIM_COLORSCHEME_URL##*/}

# echo "LC_ALL=en_US.UTF-8" | sudo tee -a /etc/environment
# echo "en_US.UTF-8 UTF-8" | sudo tee -a /etc/locale.gen
# echo "LANG=en_US.UTF-8" | sudo tee -a /etc/locale.conf
sudo locale-gen en_US.UTF-8

function bootstrap() {
    printf '\n'
    printf "########################################################\n"
    printf "Bootstrapping Debian Workstation\n"
    mk_work_dir
    install_pkgs
    install_docker
    install_yadm
    install_rbenv
    install_vim
    setup_vim
    setup_dircolors
    setup_powerline
    install_bashit
    install_nodejs
    install_aws_cli
    rm_work_dir
    stamp_it
}

function mk_work_dir() {
    # Create our working directory
    printf '\n'
    printf "########################################################\n"
    printf "Creating working directory\n"
    mkdir -p $WORK_DIR
}

function install_pkgs() {
    # Install necessary packages
    printf '\n'
    printf "########################################################\n"
    printf "Installing prerequisite debian packages\n"
    sudo apt-get --no-install-recommends -q -y install $PACKAGES
}

function install_docker() {
    # Check if vagrant exists, else Install vagrant
    if command -v "docker" >/dev/null; then
      printf '\n'
      printf "########################################################\n"
      printf "Docker found, skipping\n"
    else
      printf '\n'
      printf "########################################################\n"
      printf "Docker not found, Installing docker-ce\n"
      curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg | sudo apt-key add -
      sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") $(lsb_release -cs) stable"
      sudo apt-get update
      sudo apt-get -y install docker-ce
      sudo usermod -aG docker ${USER}
      printf '\n'
      printf "Docker installed.\n"
      printf '\n'
      printf "Reminder:\n"
      printf "Your current user has been added to the docker group, you\n"
      printf "may have to logout and log back in before you're allowed\n"
      printf "to use docker."
      printf "########################################################\n"
    fi
}

function install_yadm() {
    # Install yadm
    if [ ! -d "$HOME/.yadm" ]; then
      printf '\n'
      printf "########################################################\n"
      printf "Installing yadm"
      sudo apt-get install yadm
      # Update yadm repo
      printf "Updating the yadm repo origin URL\n"
      yadm clone "$YADM_REPO"
      yadm pull --rebase origin master
    else
      printf '\n'
      printf "########################################################\n"
      printf "Yadm already installed, skipping\n"
    fi
}

function install_rbenv() {
    # Install rbenv & ruby-build
    if [ ! -d "$HOME/.rbenv" ]; then
      printf '\n'
      printf "########################################################\n"
      printf "Installing rbenv\n"
      git clone https://github.com/rbenv/rbenv.git ~/.rbenv
      if [ ! -d "$HOME/.rbenv/plugins/ruby-build" ]; then
        printf '\n'
        printf "########################################################\n"
        printf "Installing ruby-build\n"
        git clone https://github.com/rbenv/ruby-build.git $HOME/.rbenv/plugins/ruby-build
      fi
    else
      printf '\n'
      printf "########################################################\n"
      printf "rbenv and ruby-build installed, skipping\n"
    fi
}

function install_vim() {
    # Install vim
    if command -v "vim" >/dev/null; then
      printf '\n'
      printf "########################################################\n"
      printf "vim installed, skipping\n"
    else
      printf '\n'
      printf "########################################################\n"
      printf "Installing vim\n"
      git clone git@github.com:vim/vim.git
      cd vim
      ./configure --enable-python3interp --enable-rubyinterp --enable-gui=no --without-x --enable-cscope --enable-multibyte --prefix=/usr
      make
      sudo make install
      sudo update-alternatives --set editor /usr/bin/vim.
    fi
}

function setup_vim() {
    # VIM: create directories
    mkdir -p $HOME/.vim/{colors,swaps,backups}
    if [ ! -f $HOME/.vim/colors/$VIM_COLORSCHEME ]; then
      printf '\n'
      printf "########################################################\n"
      printf "Bootstraping Vim\n"
      wget $VIM_COLORSCHEME_URL -O $HOME/.vim/colors/$VIM_COLORSCHEME
      vim '+PlugUpdate' '+PlugClean!' '+PlugUpdate' '+qall'
    else
      printf '\n'
      printf "########################################################\n"
      printf "Vim already configured, skipping\n"
    fi
}

function setup_dircolors() {
    # Install dircolors (in my .bashrc )
    if [ ! -f "$HOME/.dircolors" ]; then
      wget -nc https://raw.github.com/trapd00r/LS_COLORS/master/LS_COLORS -O $HOME/.dircolors
    else
      printf '\n'
      printf "########################################################\n"
      printf "dircolors already installed, skipping\n"
    fi

}

function setup_powerline() {
    # https://powerline.readthedocs.io/en/latest/
    # make sure the following is in your shellrc:
    # https://powerline.readthedocs.io/en/latest/usage/shell-prompts.html#
    # For further configuration follow these docs
    # https://powerline.readthedocs.io/en/latest/configuration.html
    # We don't "need" this with bash_it, but I'm keeping this here for tmux
    # and vim powerline config
    if [ -f "$HOME/.local/bin/powerline" ]; then
      printf '\n'
      printf "########################################################\n"
      printf "Powerline exists,Skipping"
    else
      printf '\n'
      printf "########################################################\n"
      printf "Powerline not found, installing"
      printf '\n'
      pip install --user setuptools
      pip install --user powerline-status
      mkdir -p $HOME/.local/share/fonts
      wget https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf -O $HOME/.local/share/fonts/PowerlineSymbols.otf
      fc-cache -vf $HOME/.local/share/fonts/
      mkdir -p $HOME/.config/fontconfig/conf.d
      wget https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf -O $HOME/.config/fontconfig/conf.d/10-powerline-symbols.conf
    fi
    # Install powerline fonts and scripts
    if [ ! -d "$HOME/.config/fontconfig/conf.d" ]; then
      printf '\n'
      printf "########################################################\n"
      printf "Installing Powerline Fonts\n"
      cd $WORK_DIR
      git clone https://github.com/powerline/fonts.git
      cd $WORK_DIR/fonts/ && sh install.sh
      cd $WORK_DIR
      mkdir -p $HOME/.config/fontconfig/conf.d
      cp fontconfig/50-enable-terminess-powerline.conf $HOME/.config/fontconfig/conf.d/
      fc-cache -vf
      rm -rf fonts/
    else
      printf '\n'
      printf "########################################################\n"
      printf "Powerline Fonts already installed, skipping\n"
    fi
}

function install_bashit() {
    # Install Bash-it
    # Check if ~/.bash_it directory exists, if so, skip
    if [ ! -d "$HOME/.bash_it" ]; then
      # Check to see if .bashrc already contains bash_it settings
      file="$HOME/.bashrc"
      if grep -q "BASH_IT_THEME=" "$file"; then
        printf "Installing bash_it\n"
        printf "Found bash_it theme set in .bashrc, setting --no-modify-config\n"
        options="--silent --no-modify-config"
      else
        printf "Installing bash_it\n"
        printf "No bash_it theme in .bashrc, installing bash_it with defaults\n"
        options="--silent"
      fi
      git clone --depth=1 https://github.com/Bash-it/bash-it.git $HOME/.bash_it
      $HOME/.bash_it/install.sh $options
    else
      printf '\n'
      printf "########################################################\n"
      printf "bash-it already installed, skipping\n"
    fi
}

function install_nodejs() {
    # Check if nodejs exists, else Install nodejs
    if command -v "node" >/dev/null; then
      printf '\n'
      printf "########################################################\n"
      printf "NodeJS found, skipping\n"
    else
      printf '\n'
      printf "########################################################\n"
      printf "NodeJS not found, Installing nodejs using package manager\n"
      curl -sL "https://deb.nodesource.com/setup_11.x" | sudo -E bash -
      sudo apt-get install -y nodejs
    fi
}

function install_aws_cli() {
    # Check if nodejs exists, else Install nodejs
    if command -v "aws" >/dev/null; then
      printf '\n'
      printf "########################################################\n"
      printf "AWS CLI Tools found, skipping\n"
    else
      printf '\n'
      printf "########################################################\n"
      printf "AWS CLI Tools not found, Installing aws using python-pip\n"
      pip install awscli --upgrade --user
    fi
}

function rm_work_dir() {
    # Create our working directory
    printf '\n'
    printf "########################################################\n"
    printf "Removing working directory\n"
    rm -rf $WORK_DIR
}

function stamp_it() {
    printf '\n'
    printf "########################################################\n"
    printf "Writing ~/.provisioned to mark workstation as provisioned\n"
    touch -am $HOME/.provisioned
    printf '\n'
    printf "########################################################\n"
    printf "All Done!\n"
    printf "You may need to open a new shell to verify bash-it themes are working.\n"
    printf "rbenv is installed, but you still need to install necessary ruby versions.\n"
    printf "########################################################\n"
}

if [[ "$OSTYPE" == "linux-gnu" ]]; then
  if [ -f $PROVISIONED ]; then
    printf '\n'
    printf "########################################################\n"
    printf '\n'
    printf "WARNING: Found '$HOME/.provisioned'!\n"
    printf '\n'
    printf "Workstation appears to be bootstrapped, rm ~/.provisioned to run this script\n"
    printf "########################################################\n"
    exit 1
  else
    bootstrap
  fi
fi
